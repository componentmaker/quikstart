# Source File: kafka-broker-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-broker
  namespace: kafka
  labels:
    app: kafka
    component: broker
spec:
  serviceName: kafka-headless
  replicas: 3
  selector:
    matchLabels:
      app: kafka
      component: broker
  template:
    metadata:
      labels:
        app: kafka
        component: broker
    spec:
      # FIX 1: Add the securityContext to grant write permissions to the volume.
      securityContext:
        fsGroup: 0
      initContainers:
        - name: config-initializer
          image: busybox:1.36
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -ex
              while [ ! -f /config-template/server.properties ]; do
                echo "Waiting for ConfigMap file..." && sleep 1
              done
              
              mkdir -p /processed-config
              ORDINAL=${HOSTNAME##*-}
              # Broker IDs start from 3, assuming controllers are 0, 1, 2.
              BROKER_ID=$((3 + $ORDINAL))
              INTERNAL_ADVERTISED_HOSTNAME="${HOSTNAME}.kafka-headless.kafka.svc.cluster.local"

              echo "Initializing config for broker node ID: $BROKER_ID"
              
              # Substitute all placeholders and create the final server.properties
              sed -e "s/BROKER_ID_PLACEHOLDER/$BROKER_ID/g" \
                  -e "s/INTERNAL_ADVERTISED_HOSTNAME_PLACEHOLDER/$INTERNAL_ADVERTISED_HOSTNAME/g" \
                  /config-template/server.properties > /processed-config/server.properties
          volumeMounts:
            - name: config-template
              mountPath: /config-template
            - name: processed-config
              mountPath: /processed-config
        
        # FIX 2: This container now uses the config generated by the previous one.
        - name: prepare-storage
          image: apache/kafka:3.9.1
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              FINAL_CONFIG_FILE="/processed-config/server.properties"

              # Check if storage is already formatted to prevent errors on restart
              if [ ! -f /kafka/data-logs/meta.properties ]; then
                echo "Formatting storage directory using final config..."
                /opt/kafka/bin/kafka-storage.sh format \
                  -t "$KAFKA_CLUSTER_ID" \
                  -c "$FINAL_CONFIG_FILE"
              else
                echo "Broker storage directory already formatted. Skipping."
              fi
          env:
            - name: KAFKA_CLUSTER_ID
              value: "io9BKK6KRpSRz2uIOTva-g"
          volumeMounts:
            - name: data-logs
              mountPath: /kafka/data-logs
            # Mount the config volume so it can be used for formatting
            - name: processed-config
              mountPath: /processed-config
            - name: broker-secrets
              mountPath: /etc/kafka/secrets
              readOnly: true
      containers:
        - name: kafka-broker
          image: apache/kafka:3.9.1
          command:
            - "/opt/kafka/bin/kafka-server-start.sh"
            - "/processed-config/server.properties"
          ports:
            - containerPort: 9092
              name: broker
            - containerPort: 9094
              name: client
          env:
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx2G -Xms2G"
          volumeMounts:
            - name: data-logs
              mountPath: /kafka/data-logs
            - name: processed-config
              mountPath: /processed-config
            - name: broker-secrets
              mountPath: /etc/kafka/secrets
              readOnly: true
      volumes:
        - name: config-template
          configMap:
            name: kafka-broker-config
        - name: processed-config
          emptyDir: {}
        - name: broker-secrets
          secret:
            secretName: kafka-broker-secrets
  volumeClaimTemplates:
    - metadata:
        name: data-logs
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
